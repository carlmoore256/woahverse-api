generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model ChatPrize {
  id            String        @id
  chatSessionId String?       @map("chat_session_id")
  value         Int?
  reason        String?
  createdAt     DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  chatSessions  ChatSessions? @relation(fields: [chatSessionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("chat_prize")
}

model ChatSessionEmotionalState {
  emotionalStateId String         @map("emotional_state_id")
  chatSessionId    String         @map("chat_session_id")
  chatSessions     ChatSessions   @relation(fields: [chatSessionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  emotionalState   EmotionalState @relation(fields: [emotionalStateId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([emotionalStateId, chatSessionId])
  @@map("chat_session_emotional_state")
}

model ChatSessions {
  id                        String                      @id
  userId                    String?                     @map("user_id")
  createdAt                 DateTime?                   @default(now()) @map("created_at") @db.Timestamp(6)
  title                     String?
  chatPrize                 ChatPrize[]
  chatSessionEmotionalState ChatSessionEmotionalState[]
  users                     Users?                      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages                  Messages[]

  @@map("chat_sessions")
}

model Emotion {
  id                    String                       @id
  name                  String
  description           String?
  embedding             Unsupported("vector(1536)")?
  emotionalStateEmotion EmotionalStateEmotion[]

  @@map("emotion")
}

model EmotionalState {
  id                        String                       @id
  createdAt                 DateTime?                    @default(now()) @map("created_at") @db.Timestamp(6)
  prompt                    String?
  embedding                 Unsupported("vector(1536)")?
  chatSessionEmotionalState ChatSessionEmotionalState[]
  emotionalStateEmotion     EmotionalStateEmotion[]
  globalStateEmotion        GlobalEmotionalState?
  userEmotionalState        UserEmotionalState[]

  @@map("emotional_state")
}

model EmotionalStateEmotion {
  emotionalStateId String         @map("emotional_state_id")
  emotionId        String         @map("emotion_id")
  emotion          Emotion        @relation(fields: [emotionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  emotionalState   EmotionalState @relation(fields: [emotionalStateId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([emotionalStateId, emotionId])
  @@map("emotional_state_emotion")
}

model FriendLeaderboard {
  id     String  @id
  userId String? @map("user_id")
  score  Int?
  users  Users?  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("friend_leaderboard")
}

model GlobalEmotionalState {
  emotionalStateId String         @id @map("emotional_state_id")
  emotionalState   EmotionalState @relation(fields: [emotionalStateId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("global_emotional_state")
}

model Messages {
  id            String                       @id
  chatSessionId String?                      @map("chat_session_id")
  message       String?
  createdAt     DateTime?                    @default(now()) @map("created_at") @db.Timestamp(6)
  embedding     Unsupported("vector(1536)")?
  role          String?
  chatSessions  ChatSessions?                @relation(fields: [chatSessionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("messages")
}

model UserEmotionalState {
  emotionalStateId String         @map("emotional_state_id")
  userId           String         @map("user_id")
  emotionalState   EmotionalState @relation(fields: [emotionalStateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users            Users          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([emotionalStateId, userId])
  @@map("user_emotional_state")
}

model Users {
  id                 String               @id
  createdAt          DateTime?            @default(now()) @map("created_at") @db.Timestamp(6)
  chatSessions       ChatSessions[]
  friendLeaderboard  FriendLeaderboard[]
  userEmotionalState UserEmotionalState[]
  signupSession      SignupSession[]

  @@map("users")
}

model SignupSession {
  id        String    @id @default(cuid()) // stored in the cookie
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  userId    String?   @map("user_id")

  // user would represent a conversion from a signup session to a user
  user           Users?           @relation(fields: [userId], references: [id])
  signupResponse SignupResponse[] // the number of responses will determine whether they have completed
  signupQuestion SignupQuestion[]

  @@map("signup_session")
}

// the order of questions will be randomized
// the progression of them will inform the model on how to build an emotional state
// and follow up with the next question
model SignupQuestion {
  id              String           @id @default(cuid())
  text            String
  templateId      String           @map("template_id")
  signupSessionId String           @map("signup_session_id")
  signupSession   SignupSession    @relation(fields: [signupSessionId], references: [id])
  signupResponse  SignupResponse[]
  template        QuestionTemplate @relation(fields: [templateId], references: [id])

  @@map("signup_question")
}

model SignupResponse {
  id               String         @id @default(cuid())
  text             String
  createdAt        DateTime?      @default(now()) @map("created_at")
  signupSessionId  String         @map("signup_session_id")
  signupQuestionId String         @map("signup_question_id")
  signupSession    SignupSession  @relation(fields: [signupSessionId], references: [id])
  signupQuestion   SignupQuestion @relation(fields: [signupQuestionId], references: [id])

  @@map("signup_response")
}

enum QuestionTemplateType {
  TEXT
  MULTIPLE_CHOICE

  @@map("question_template_type")
}

enum QuestionTemplateScenario {
  SIGNUP
  CHAT

  @@map("question_template_scenario")
}

model QuestionTemplate {
  id             String                   @id @default(cuid())
  text           String
  weight         Float                    @default(1) // how important is the question
  type           QuestionTemplateType
  scenario       QuestionTemplateScenario
  signupQuestion SignupQuestion[]

  @@map("question_template")
}
